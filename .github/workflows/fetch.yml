
name: Fetch updates

on:
  [workflow_dispatch]
jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: testing what happens when I remove db
      run: | 
       rm db.json
       echo "ewogICJyc3MiOiB7CiAgICAiaHR0cHM6Ly9nYW1lbWFraW5nLnNvY2lhbC9AZW1tYS5yc3MiOiB7CiAgICAgICJyc3MiOiB7CiAgICAgICAgImNoYW5uZWwiOiB7CiAgICAgICAgICAidGl0bGUiOiAiRW1tYSA8TWFybWFkaWxlTWFudGVhdGVyPiIsCiAgICAgICAgICAibGluayI6ICJodHRwczovL2dhbWVtYWtpbmcuc29jaWFsL0BlbW1hIiwKICAgICAgICAgICJpdGVtIjogW10KICAgICAgICB9LAogICAgICAgICJAdmVyc2lvbiI6ICIyLjAiLAogICAgICAgICJAeG1sbnM6d2ViZmVlZHMiOiAiaHR0cDovL3dlYmZlZWRzLm9yZy9yc3MvMS4wIiwKICAgICAgICAiQHhtbG5zOm1lZGlhIjogImh0dHA6Ly9zZWFyY2gueWFob28uY29tL21yc3MvIiwKICAgICAgICAiQHhtbG5zOmNvbnRlbnQiOiBudWxsCiAgICAgIH0sCiAgICAgICJtYW5pcHVsYXRlX2lucHV0IjogIiIsCiAgICAgICJyZXRhaW5fYWxsX2VudHJpZXMiOiB0cnVlLAogICAgICAidGl0bGUiOiAiRW1tYSA8TWFybWFkaWxlTWFudGVhdGVyPiIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vZ2FtZW1ha2luZy5zb2NpYWwvQGVtbWEiCiAgICB9LAogICAgImh0dHBzOi8vaXRjaC5pby9nYW1lcy9uZXdlc3QvYnktbWFybWFkaWxlbWFudGVhdGVyLnhtbCI6IHsKICAgICAgInJzcyI6IHsKICAgICAgICAiY2hhbm5lbCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJMYXRlc3QgZ2FtZXMgYnkgRW1tYSAtIGl0Y2guaW8iLAogICAgICAgICAgImxpbmsiOiAiaHR0cHM6Ly9pdGNoLmlvL2dhbWVzL25ld2VzdC9ieS1tYXJtYWRpbGVtYW50ZWF0ZXIiLAogICAgICAgICAgIml0ZW0iOiBbXQogICAgICAgIH0sCiAgICAgICAgIkB2ZXJzaW9uIjogIjIuMCIsCiAgICAgICAgIkB4bWxuczp3ZWJmZWVkcyI6IG51bGwsCiAgICAgICAgIkB4bWxuczptZWRpYSI6IG51bGwsCiAgICAgICAgIkB4bWxuczpjb250ZW50IjogbnVsbAogICAgICB9LAogICAgICAibWFuaXB1bGF0ZV9pbnB1dCI6ICJub2RlIGl0Y2guanMiLAogICAgICAicmV0YWluX2FsbF9lbnRyaWVzIjogdHJ1ZSwKICAgICAgInRpdGxlIjogIkxhdGVzdCBnYW1lcyBieSBFbW1hIC0gaXRjaC5pbyIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vaXRjaC5pby9nYW1lcy9uZXdlc3QvYnktbWFybWFkaWxlbWFudGVhdGVyIgogICAgfSwKICAgICJodHRwczovL3Byb2dyYW1taW5nLmRldi9mZWVkcy91L2VtbWEueG1sP3NvcnQ9TmV3IjogewogICAgICAicnNzIjogewogICAgICAgICJjaGFubmVsIjogewogICAgICAgICAgInRpdGxlIjogInByb2dyYW1taW5nLmRldiAtIGVtbWEiLAogICAgICAgICAgImxpbmsiOiAiaHR0cHM6Ly9wcm9ncmFtbWluZy5kZXYvdS9lbW1hIiwKICAgICAgICAgICJpdGVtIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgImd1aWQiOiAiaHR0cHM6Ly9wcm9ncmFtbWluZy5kZXYvcG9zdC85MjkwODEiLAogICAgICAgICAgICAgICJ0aXRsZSI6ICJIb3cgV2FzIEkgU3VwcG9zZWQgdG8gS25vdyBNeSBSb29tbWF0ZSBXYXMgYSBEaW1lbnNpb24gSG9wcGluZyBXaXRjaCE/IC0gbXkgc3VibWlzc2lvbiBmb3IgU3VtbWVyIEZlZGl2ZXJzZSBKYW0iLAogICAgICAgICAgICAgICJwbGFpblRpdGxlIjogbnVsbCwKICAgICAgICAgICAgICAiaW1hZ2V1cmwiOiBudWxsLAogICAgICAgICAgICAgICJsaW5rIjogImh0dHBzOi8vbWFybWFkaWxlbWFudGVhdGVyLml0Y2guaW8vaG93LXdhcy1pLXN1cHBvc2VkLXRvLWtub3ctbXktcm9vbW1hdGUtd2FzLWEtZGltZW5zaW9uLWhvcHBpbmctd2l0Y2giLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJzdWJtaXR0ZWQgYnkgPGEgaHJlZj1cImh0dHBzOi8vcHJvZ3JhbW1pbmcuZGV2L3UvZW1tYVwiPmVtbWE8L2E+IHRvIDxhIGhyZWY9XCJodHRwczovL3Byb2dyYW1taW5nLmRldi9jL3BsYXlfbXlfZ2FtZVwiPnBsYXlfbXlfZ2FtZTwvYT48YnI+NyBwb2ludHMgfCA8YSBocmVmPVwiaHR0cHM6Ly9wcm9ncmFtbWluZy5kZXYvcG9zdC85MjkwODFcIj4xIGNvbW1lbnRzPC9hPjxicj48YSBocmVmPVwiaHR0cHM6Ly9tYXJtYWRpbGVtYW50ZWF0ZXIuaXRjaC5pby9ob3ctd2FzLWktc3VwcG9zZWQtdG8ta25vdy1teS1yb29tbWF0ZS13YXMtYS1kaW1lbnNpb24taG9wcGluZy13aXRjaFwiPmh0dHBzOi8vbWFybWFkaWxlbWFudGVhdGVyLml0Y2guaW8vaG93LXdhcy1pLXN1cHBvc2VkLXRvLWtub3ctbXktcm9vbW1hdGUtd2FzLWEtZGltZW5zaW9uLWhvcHBpbmctd2l0Y2g8L2E+PHA+VGhpcyBpcyBhIGdhbWUgYWJvdXQgYmVpbmcgcm9vbW1hdGVzLiBBd2FrZSBhbmQgZmFjZSB5b3VyIGRheSBhbG9uZyBzaWRlIHRoZSBwZXJzb24gd2hvIHNoYXJlcyB5b3VyIGxpdmluZyBzcGFjZSE8L3A+XG48cD48aW1nIHNyYz1cImh0dHBzOi8vcHJvZ3JhbW1pbmcuZGV2L3BpY3Rycy9pbWFnZS9lY2ZjN2RhNS0yODAyLTQzYjMtODJjMS04YzZlYWJlZGZkNTYucG5nXCIgYWx0PVwiXCIgLz48L3A+XG4iLAogICAgICAgICAgICAgICJhdXRob3IiOiBudWxsLAogICAgICAgICAgICAgICJwdWJEYXRlIjogIlR1ZSwgMjUgSnVsIDIwMjMgMTI6Mjc6MTkgKzAwMDAiLAogICAgICAgICAgICAgICJjcmVhdGVEYXRlIjogbnVsbCwKICAgICAgICAgICAgICAidXBkYXRlRGF0ZSI6IG51bGwsCiAgICAgICAgICAgICAgIm1lZGlhOmNvbnRlbnQiOiBudWxsLAogICAgICAgICAgICAgICJjb250ZW50OmVuY29kZWQiOiBudWxsCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJAdmVyc2lvbiI6ICIyLjAiLAogICAgICAgICJAeG1sbnM6d2ViZmVlZHMiOiBudWxsLAogICAgICAgICJAeG1sbnM6bWVkaWEiOiBudWxsLAogICAgICAgICJAeG1sbnM6Y29udGVudCI6IG51bGwKICAgICAgfSwKICAgICAgIm1hbmlwdWxhdGVfaW5wdXQiOiAiIiwKICAgICAgInJldGFpbl9hbGxfZW50cmllcyI6IHRydWUsCiAgICAgICJ0aXRsZSI6ICJwcm9ncmFtbWluZy5kZXYgLSBlbW1hIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly9wcm9ncmFtbWluZy5kZXYvdS9lbW1hIgogICAgfSwKICAgICJodHRwczovL21hcm1hZGlsZW1hbnRlYXRlci5kZXYvYmxvZy9yc3MueG1sIjogewogICAgICAicnNzIjogewogICAgICAgICJjaGFubmVsIjogewogICAgICAgICAgInRpdGxlIjogIkVtbWEncyBCbG9nISIsCiAgICAgICAgICAibGluayI6ICJodHRwczovL21hcm1hZGlsZW1hbnRlYXRlci5kZXYvYmxvZy8iLAogICAgICAgICAgIml0ZW0iOiBbXQogICAgICAgIH0sCiAgICAgICAgIkB2ZXJzaW9uIjogIjIuMCIsCiAgICAgICAgIkB4bWxuczp3ZWJmZWVkcyI6IG51bGwsCiAgICAgICAgIkB4bWxuczptZWRpYSI6IG51bGwsCiAgICAgICAgIkB4bWxuczpjb250ZW50IjogImh0dHA6Ly9wdXJsLm9yZy9yc3MvMS4wL21vZHVsZXMvY29udGVudC8iCiAgICAgIH0sCiAgICAgICJtYW5pcHVsYXRlX2lucHV0IjogIiIsCiAgICAgICJyZXRhaW5fYWxsX2VudHJpZXMiOiB0cnVlLAogICAgICAidGl0bGUiOiAiRW1tYSdzIEJsb2chIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly9tYXJtYWRpbGVtYW50ZWF0ZXIuZGV2L2Jsb2cvIgogICAgfSwKICAgICJodHRwczovL29wZW5nYW1lYXJ0Lm9yZy91c2Vycy8xMDU2MDgvYXJ0LnhtbCI6IHsKICAgICAgInJzcyI6IHsKICAgICAgICAiY2hhbm5lbCI6IHsKICAgICAgICAgICJ0aXRsZSI6ICJBcnQgYnkgTWFybWFkaWxlTWFudGVhdGVyIiwKICAgICAgICAgICJsaW5rIjogImh0dHBzOi8vb3BlbmdhbWVhcnQub3JnL2xhdGVzdC8xMDU2MDgiLAogICAgICAgICAgIml0ZW0iOiBbXQogICAgICAgIH0sCiAgICAgICAgIkB2ZXJzaW9uIjogIjIuMCIsCiAgICAgICAgIkB4bWxuczp3ZWJmZWVkcyI6IG51bGwsCiAgICAgICAgIkB4bWxuczptZWRpYSI6IG51bGwsCiAgICAgICAgIkB4bWxuczpjb250ZW50IjogImh0dHA6Ly9wdXJsLm9yZy9yc3MvMS4wL21vZHVsZXMvY29udGVudC8iCiAgICAgIH0sCiAgICAgICJtYW5pcHVsYXRlX2lucHV0IjogIm5vZGUgLi9vZ2EuanMiLAogICAgICAicmV0YWluX2FsbF9lbnRyaWVzIjogdHJ1ZSwKICAgICAgInRpdGxlIjogIkFydCBieSBNYXJtYWRpbGVNYW50ZWF0ZXIiLAogICAgICAibGluayI6ICJodHRwczovL29wZW5nYW1lYXJ0Lm9yZy9sYXRlc3QvMTA1NjA4IgogICAgfSwKICAgICJodHRwczovL3B4bG1vLmNvbS91c2Vycy9lbW1hLmF0b20iOiB7CiAgICAgICJyc3MiOiB7CiAgICAgICAgImNoYW5uZWwiOiB7CiAgICAgICAgICAidGl0bGUiOiAiZW1tYSBvbiBQaXhlbGZlZCIsCiAgICAgICAgICAibGluayI6ICJodHRwczovL3B4bG1vLmNvbS9lbW1hIiwKICAgICAgICAgICJpdGVtIjogW10KICAgICAgICB9LAogICAgICAgICJAdmVyc2lvbiI6ICIyLjAiLAogICAgICAgICJAeG1sbnM6d2ViZmVlZHMiOiAiaHR0cDovL3dlYmZlZWRzLm9yZy9yc3MvMS4wIiwKICAgICAgICAiQHhtbG5zOm1lZGlhIjogImh0dHA6Ly9zZWFyY2gueWFob28uY29tL21yc3MvIiwKICAgICAgICAiQHhtbG5zOmNvbnRlbnQiOiAiaHR0cDovL3B1cmwub3JnL3Jzcy8xLjAvbW9kdWxlcy9jb250ZW50LyIKICAgICAgfSwKICAgICAgIm1hbmlwdWxhdGVfaW5wdXQiOiAiIiwKICAgICAgInJldGFpbl9hbGxfZW50cmllcyI6IHRydWUsCiAgICAgICJ0aXRsZSI6ICJlbW1hIG9uIFBpeGVsZmVkIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly9weGxtby5jb20vZW1tYSIKICAgIH0KICB9LAogICJvdXRwdXRfb25lX2NoYW5uZWwiOiB0cnVlLAogICJ0aXRsZSI6ICIiLAogICJsaW5rIjogIiIsCiAgImluY2x1ZGVfZGVzY3JpcHRpb25fYXNfdGl0bGVfaWZfbm9uZV9naXZlbiI6IHRydWUsCiAgImRlc2NyaXB0aW9uX3RpdGxlX3dvcmRfY291bnQiOiAxMCwKICAidGl0bGVfZWxsaXBzaXMiOiAiLi4uIiwKICAicG9wdWxhdGVfY29udGVudF9lbmNvZGVkIjogdHJ1ZSwKICAiYWRkX21lZGlhX3RvX2NvbnRlbnRfZW5jb2RlZCI6IHRydWUsCiAgIm1heF9lbnRyaWVzX3B1Ymxpc2hlZCI6IC0xLAogICJvdmVycmlkZV9pdGVtX2F1dGhvciI6IGZhbHNlCn0=" | base64 --decode >> db.json
    - name: üèó Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }} 
        known_hosts: 'just-a-placeholder'
    
    - name: Add known hosts
      run: ssh-keyscan -H ${{ secrets.LINODE_IP_ADDRESS }} >> ~/.ssh/known_hosts
      
    - name: üß∂ Install deps
      run: |
        yarn
        
    - name: ‚¨á Download SimpleRSSAggregator artifact
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        workflow: ci.yml
        workflow_conclusion: success
        branch: development
        path: ./
        name: SimpleRSSAggregator-openssl1.1.1f 
        repo: MarmadileManteater/SimpleRSSAggregator
        check_artifacts:  false
        search_artifacts: false
        skip_unpack: false
        if_no_artifact_found: fail
        
    - name: üîì Allow executing SimpleRSSAggregator
      run: |
        chmod +x ./syndication_junction
        
    - name: üé≠ Use my linode as a proxy to avoid being blocked by sites that block gh-actions agents ü§´
      continue-on-error: true
      run: |
        # programming.dev blocks gh actions
        scp -r $(pwd) ${{ secrets.SSH_USER }}@${{ secrets.LINODE_IP_ADDRESS }}:~/my-social-feed

    - name: üê∂ Fetch feeds into db.json
      run: |
        ssh -t ${{ secrets.SSH_USER }}@${{ secrets.LINODE_IP_ADDRESS }} 'cd ~/my-social-feed && ./syndication_junction fetch https://marmadilemanteater.dev/blog/rss.xml https://gamemaking.social/@emma.rss https://programming.dev/feeds/u/emma.xml?sort=New https://opengameart.org/users/105608/art.xml https://itch.io/games/newest/by-marmadilemanteater.xml https://pxlmo.com/users/emma.atom'
        
    - name: üñ® Output to RSS
      run: |
        ssh -t ${{ secrets.SSH_USER }}@${{ secrets.LINODE_IP_ADDRESS }} 'cd ~/my-social-feed && ./syndication_junction output-rss feed.xml https://raw.githubusercontent.com/MarmadileManteater/MySocialFeed/development'

    - name: ‚¨á Download results from linode
      run: |
        scp -r ${{ secrets.SSH_USER }}@${{ secrets.LINODE_IP_ADDRESS }}:~/my-social-feed/* .
        ls -la

    #- name: üßπ Clean up dir on my linode
    #  run: |
    #    ssh -t ${{ secrets.SSH_USER }}@${{ secrets.LINODE_IP_ADDRESS }} 'rm -rf ~/my-social-feed'
    
    - name: üìÇ Create output dir
      run: |
        mkdir output
        cp feed.xml output
        cp -r media/ output
        cp db.json output
        
    - uses: actions/upload-artifact@v3
      with:
        name: feed
        path: output/
#    - name: üìù Commit feed.xml back to the repo
#      run: |
#        git config --global user.name "gh actions bot"
#        git config --global user.email "gh-actions-bot[bot]@MarmadileManteater.github.io"
#        git add .
#        # Force the build to succeed, even if no files were changed
#        git commit -m 'Update files' || true
#        git push
